# coding: utf-8

"""
    dbt Cloud API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0a1
    Contact: support@getdbt.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Run(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'trigger_id': 'int',
        'account_id': 'int',
        'project_id': 'int',
        'job_definition_id': 'int',
        'status': 'int',
        'git_branch': 'str',
        'git_sha': 'str',
        'status_message': 'str',
        'dbt_version': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'dequeued_at': 'datetime',
        'started_at': 'datetime',
        'finished_at': 'datetime',
        'last_checked_at': 'datetime',
        'last_heartbeat_at': 'datetime',
        'owner_thread_id': 'str',
        'executed_by_thread_id': 'str',
        'artifacts_saved': 'bool',
        'artifacts_s3_path': 'str',
        'has_docs_generated': 'bool',
        'trigger': 'Trigger',
        'job': 'Job',
        'duration': 'str',
        'queued_duration': 'str',
        'run_duration': 'str',
        'duration_humanized': 'str',
        'queued_duration_humanized': 'str',
        'run_duration_humanized': 'str',
        'status_humanized': 'str',
        'created_at_humanized': 'str'
    }

    attribute_map = {
        'id': 'id',
        'trigger_id': 'trigger_id',
        'account_id': 'account_id',
        'project_id': 'project_id',
        'job_definition_id': 'job_definition_id',
        'status': 'status',
        'git_branch': 'git_branch',
        'git_sha': 'git_sha',
        'status_message': 'status_message',
        'dbt_version': 'dbt_version',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'dequeued_at': 'dequeued_at',
        'started_at': 'started_at',
        'finished_at': 'finished_at',
        'last_checked_at': 'last_checked_at',
        'last_heartbeat_at': 'last_heartbeat_at',
        'owner_thread_id': 'owner_thread_id',
        'executed_by_thread_id': 'executed_by_thread_id',
        'artifacts_saved': 'artifacts_saved',
        'artifacts_s3_path': 'artifacts_s3_path',
        'has_docs_generated': 'has_docs_generated',
        'trigger': 'trigger',
        'job': 'job',
        'duration': 'duration',
        'queued_duration': 'queued_duration',
        'run_duration': 'run_duration',
        'duration_humanized': 'duration_humanized',
        'queued_duration_humanized': 'queued_duration_humanized',
        'run_duration_humanized': 'run_duration_humanized',
        'status_humanized': 'status_humanized',
        'created_at_humanized': 'created_at_humanized'
    }

    def __init__(self, id=None, trigger_id=None, account_id=None, project_id=None, job_definition_id=None, status=None, git_branch=None, git_sha=None, status_message=None, dbt_version=None, created_at=None, updated_at=None, dequeued_at=None, started_at=None, finished_at=None, last_checked_at=None, last_heartbeat_at=None, owner_thread_id=None, executed_by_thread_id=None, artifacts_saved=None, artifacts_s3_path=None, has_docs_generated=None, trigger=None, job=None, duration=None, queued_duration=None, run_duration=None, duration_humanized=None, queued_duration_humanized=None, run_duration_humanized=None, status_humanized=None, created_at_humanized=None):  # noqa: E501
        """Run - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._trigger_id = None
        self._account_id = None
        self._project_id = None
        self._job_definition_id = None
        self._status = None
        self._git_branch = None
        self._git_sha = None
        self._status_message = None
        self._dbt_version = None
        self._created_at = None
        self._updated_at = None
        self._dequeued_at = None
        self._started_at = None
        self._finished_at = None
        self._last_checked_at = None
        self._last_heartbeat_at = None
        self._owner_thread_id = None
        self._executed_by_thread_id = None
        self._artifacts_saved = None
        self._artifacts_s3_path = None
        self._has_docs_generated = None
        self._trigger = None
        self._job = None
        self._duration = None
        self._queued_duration = None
        self._run_duration = None
        self._duration_humanized = None
        self._queued_duration_humanized = None
        self._run_duration_humanized = None
        self._status_humanized = None
        self._created_at_humanized = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if trigger_id is not None:
            self.trigger_id = trigger_id
        if account_id is not None:
            self.account_id = account_id
        if project_id is not None:
            self.project_id = project_id
        if job_definition_id is not None:
            self.job_definition_id = job_definition_id
        if status is not None:
            self.status = status
        if git_branch is not None:
            self.git_branch = git_branch
        if git_sha is not None:
            self.git_sha = git_sha
        if status_message is not None:
            self.status_message = status_message
        if dbt_version is not None:
            self.dbt_version = dbt_version
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if dequeued_at is not None:
            self.dequeued_at = dequeued_at
        if started_at is not None:
            self.started_at = started_at
        if finished_at is not None:
            self.finished_at = finished_at
        if last_checked_at is not None:
            self.last_checked_at = last_checked_at
        if last_heartbeat_at is not None:
            self.last_heartbeat_at = last_heartbeat_at
        if owner_thread_id is not None:
            self.owner_thread_id = owner_thread_id
        if executed_by_thread_id is not None:
            self.executed_by_thread_id = executed_by_thread_id
        if artifacts_saved is not None:
            self.artifacts_saved = artifacts_saved
        if artifacts_s3_path is not None:
            self.artifacts_s3_path = artifacts_s3_path
        if has_docs_generated is not None:
            self.has_docs_generated = has_docs_generated
        if trigger is not None:
            self.trigger = trigger
        if job is not None:
            self.job = job
        if duration is not None:
            self.duration = duration
        if queued_duration is not None:
            self.queued_duration = queued_duration
        if run_duration is not None:
            self.run_duration = run_duration
        if duration_humanized is not None:
            self.duration_humanized = duration_humanized
        if queued_duration_humanized is not None:
            self.queued_duration_humanized = queued_duration_humanized
        if run_duration_humanized is not None:
            self.run_duration_humanized = run_duration_humanized
        if status_humanized is not None:
            self.status_humanized = status_humanized
        if created_at_humanized is not None:
            self.created_at_humanized = created_at_humanized

    @property
    def id(self):
        """Gets the id of this Run.  # noqa: E501


        :return: The id of this Run.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Run.


        :param id: The id of this Run.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def trigger_id(self):
        """Gets the trigger_id of this Run.  # noqa: E501


        :return: The trigger_id of this Run.  # noqa: E501
        :rtype: int
        """
        return self._trigger_id

    @trigger_id.setter
    def trigger_id(self, trigger_id):
        """Sets the trigger_id of this Run.


        :param trigger_id: The trigger_id of this Run.  # noqa: E501
        :type: int
        """

        self._trigger_id = trigger_id

    @property
    def account_id(self):
        """Gets the account_id of this Run.  # noqa: E501


        :return: The account_id of this Run.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Run.


        :param account_id: The account_id of this Run.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def project_id(self):
        """Gets the project_id of this Run.  # noqa: E501


        :return: The project_id of this Run.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Run.


        :param project_id: The project_id of this Run.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def job_definition_id(self):
        """Gets the job_definition_id of this Run.  # noqa: E501


        :return: The job_definition_id of this Run.  # noqa: E501
        :rtype: int
        """
        return self._job_definition_id

    @job_definition_id.setter
    def job_definition_id(self, job_definition_id):
        """Sets the job_definition_id of this Run.


        :param job_definition_id: The job_definition_id of this Run.  # noqa: E501
        :type: int
        """

        self._job_definition_id = job_definition_id

    @property
    def status(self):
        """Gets the status of this Run.  # noqa: E501


        :return: The status of this Run.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Run.


        :param status: The status of this Run.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def git_branch(self):
        """Gets the git_branch of this Run.  # noqa: E501


        :return: The git_branch of this Run.  # noqa: E501
        :rtype: str
        """
        return self._git_branch

    @git_branch.setter
    def git_branch(self, git_branch):
        """Sets the git_branch of this Run.


        :param git_branch: The git_branch of this Run.  # noqa: E501
        :type: str
        """

        self._git_branch = git_branch

    @property
    def git_sha(self):
        """Gets the git_sha of this Run.  # noqa: E501


        :return: The git_sha of this Run.  # noqa: E501
        :rtype: str
        """
        return self._git_sha

    @git_sha.setter
    def git_sha(self, git_sha):
        """Sets the git_sha of this Run.


        :param git_sha: The git_sha of this Run.  # noqa: E501
        :type: str
        """

        self._git_sha = git_sha

    @property
    def status_message(self):
        """Gets the status_message of this Run.  # noqa: E501


        :return: The status_message of this Run.  # noqa: E501
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this Run.


        :param status_message: The status_message of this Run.  # noqa: E501
        :type: str
        """

        self._status_message = status_message

    @property
    def dbt_version(self):
        """Gets the dbt_version of this Run.  # noqa: E501


        :return: The dbt_version of this Run.  # noqa: E501
        :rtype: str
        """
        return self._dbt_version

    @dbt_version.setter
    def dbt_version(self, dbt_version):
        """Sets the dbt_version of this Run.


        :param dbt_version: The dbt_version of this Run.  # noqa: E501
        :type: str
        """

        self._dbt_version = dbt_version

    @property
    def created_at(self):
        """Gets the created_at of this Run.  # noqa: E501


        :return: The created_at of this Run.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Run.


        :param created_at: The created_at of this Run.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Run.  # noqa: E501


        :return: The updated_at of this Run.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Run.


        :param updated_at: The updated_at of this Run.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def dequeued_at(self):
        """Gets the dequeued_at of this Run.  # noqa: E501


        :return: The dequeued_at of this Run.  # noqa: E501
        :rtype: datetime
        """
        return self._dequeued_at

    @dequeued_at.setter
    def dequeued_at(self, dequeued_at):
        """Sets the dequeued_at of this Run.


        :param dequeued_at: The dequeued_at of this Run.  # noqa: E501
        :type: datetime
        """

        self._dequeued_at = dequeued_at

    @property
    def started_at(self):
        """Gets the started_at of this Run.  # noqa: E501


        :return: The started_at of this Run.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this Run.


        :param started_at: The started_at of this Run.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def finished_at(self):
        """Gets the finished_at of this Run.  # noqa: E501


        :return: The finished_at of this Run.  # noqa: E501
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this Run.


        :param finished_at: The finished_at of this Run.  # noqa: E501
        :type: datetime
        """

        self._finished_at = finished_at

    @property
    def last_checked_at(self):
        """Gets the last_checked_at of this Run.  # noqa: E501


        :return: The last_checked_at of this Run.  # noqa: E501
        :rtype: datetime
        """
        return self._last_checked_at

    @last_checked_at.setter
    def last_checked_at(self, last_checked_at):
        """Sets the last_checked_at of this Run.


        :param last_checked_at: The last_checked_at of this Run.  # noqa: E501
        :type: datetime
        """

        self._last_checked_at = last_checked_at

    @property
    def last_heartbeat_at(self):
        """Gets the last_heartbeat_at of this Run.  # noqa: E501


        :return: The last_heartbeat_at of this Run.  # noqa: E501
        :rtype: datetime
        """
        return self._last_heartbeat_at

    @last_heartbeat_at.setter
    def last_heartbeat_at(self, last_heartbeat_at):
        """Sets the last_heartbeat_at of this Run.


        :param last_heartbeat_at: The last_heartbeat_at of this Run.  # noqa: E501
        :type: datetime
        """

        self._last_heartbeat_at = last_heartbeat_at

    @property
    def owner_thread_id(self):
        """Gets the owner_thread_id of this Run.  # noqa: E501


        :return: The owner_thread_id of this Run.  # noqa: E501
        :rtype: str
        """
        return self._owner_thread_id

    @owner_thread_id.setter
    def owner_thread_id(self, owner_thread_id):
        """Sets the owner_thread_id of this Run.


        :param owner_thread_id: The owner_thread_id of this Run.  # noqa: E501
        :type: str
        """

        self._owner_thread_id = owner_thread_id

    @property
    def executed_by_thread_id(self):
        """Gets the executed_by_thread_id of this Run.  # noqa: E501


        :return: The executed_by_thread_id of this Run.  # noqa: E501
        :rtype: str
        """
        return self._executed_by_thread_id

    @executed_by_thread_id.setter
    def executed_by_thread_id(self, executed_by_thread_id):
        """Sets the executed_by_thread_id of this Run.


        :param executed_by_thread_id: The executed_by_thread_id of this Run.  # noqa: E501
        :type: str
        """

        self._executed_by_thread_id = executed_by_thread_id

    @property
    def artifacts_saved(self):
        """Gets the artifacts_saved of this Run.  # noqa: E501


        :return: The artifacts_saved of this Run.  # noqa: E501
        :rtype: bool
        """
        return self._artifacts_saved

    @artifacts_saved.setter
    def artifacts_saved(self, artifacts_saved):
        """Sets the artifacts_saved of this Run.


        :param artifacts_saved: The artifacts_saved of this Run.  # noqa: E501
        :type: bool
        """

        self._artifacts_saved = artifacts_saved

    @property
    def artifacts_s3_path(self):
        """Gets the artifacts_s3_path of this Run.  # noqa: E501


        :return: The artifacts_s3_path of this Run.  # noqa: E501
        :rtype: str
        """
        return self._artifacts_s3_path

    @artifacts_s3_path.setter
    def artifacts_s3_path(self, artifacts_s3_path):
        """Sets the artifacts_s3_path of this Run.


        :param artifacts_s3_path: The artifacts_s3_path of this Run.  # noqa: E501
        :type: str
        """

        self._artifacts_s3_path = artifacts_s3_path

    @property
    def has_docs_generated(self):
        """Gets the has_docs_generated of this Run.  # noqa: E501


        :return: The has_docs_generated of this Run.  # noqa: E501
        :rtype: bool
        """
        return self._has_docs_generated

    @has_docs_generated.setter
    def has_docs_generated(self, has_docs_generated):
        """Sets the has_docs_generated of this Run.


        :param has_docs_generated: The has_docs_generated of this Run.  # noqa: E501
        :type: bool
        """

        self._has_docs_generated = has_docs_generated

    @property
    def trigger(self):
        """Gets the trigger of this Run.  # noqa: E501


        :return: The trigger of this Run.  # noqa: E501
        :rtype: Trigger
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this Run.


        :param trigger: The trigger of this Run.  # noqa: E501
        :type: Trigger
        """

        self._trigger = trigger

    @property
    def job(self):
        """Gets the job of this Run.  # noqa: E501


        :return: The job of this Run.  # noqa: E501
        :rtype: Job
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this Run.


        :param job: The job of this Run.  # noqa: E501
        :type: Job
        """

        self._job = job

    @property
    def duration(self):
        """Gets the duration of this Run.  # noqa: E501


        :return: The duration of this Run.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Run.


        :param duration: The duration of this Run.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def queued_duration(self):
        """Gets the queued_duration of this Run.  # noqa: E501


        :return: The queued_duration of this Run.  # noqa: E501
        :rtype: str
        """
        return self._queued_duration

    @queued_duration.setter
    def queued_duration(self, queued_duration):
        """Sets the queued_duration of this Run.


        :param queued_duration: The queued_duration of this Run.  # noqa: E501
        :type: str
        """

        self._queued_duration = queued_duration

    @property
    def run_duration(self):
        """Gets the run_duration of this Run.  # noqa: E501


        :return: The run_duration of this Run.  # noqa: E501
        :rtype: str
        """
        return self._run_duration

    @run_duration.setter
    def run_duration(self, run_duration):
        """Sets the run_duration of this Run.


        :param run_duration: The run_duration of this Run.  # noqa: E501
        :type: str
        """

        self._run_duration = run_duration

    @property
    def duration_humanized(self):
        """Gets the duration_humanized of this Run.  # noqa: E501


        :return: The duration_humanized of this Run.  # noqa: E501
        :rtype: str
        """
        return self._duration_humanized

    @duration_humanized.setter
    def duration_humanized(self, duration_humanized):
        """Sets the duration_humanized of this Run.


        :param duration_humanized: The duration_humanized of this Run.  # noqa: E501
        :type: str
        """

        self._duration_humanized = duration_humanized

    @property
    def queued_duration_humanized(self):
        """Gets the queued_duration_humanized of this Run.  # noqa: E501


        :return: The queued_duration_humanized of this Run.  # noqa: E501
        :rtype: str
        """
        return self._queued_duration_humanized

    @queued_duration_humanized.setter
    def queued_duration_humanized(self, queued_duration_humanized):
        """Sets the queued_duration_humanized of this Run.


        :param queued_duration_humanized: The queued_duration_humanized of this Run.  # noqa: E501
        :type: str
        """

        self._queued_duration_humanized = queued_duration_humanized

    @property
    def run_duration_humanized(self):
        """Gets the run_duration_humanized of this Run.  # noqa: E501


        :return: The run_duration_humanized of this Run.  # noqa: E501
        :rtype: str
        """
        return self._run_duration_humanized

    @run_duration_humanized.setter
    def run_duration_humanized(self, run_duration_humanized):
        """Sets the run_duration_humanized of this Run.


        :param run_duration_humanized: The run_duration_humanized of this Run.  # noqa: E501
        :type: str
        """

        self._run_duration_humanized = run_duration_humanized

    @property
    def status_humanized(self):
        """Gets the status_humanized of this Run.  # noqa: E501


        :return: The status_humanized of this Run.  # noqa: E501
        :rtype: str
        """
        return self._status_humanized

    @status_humanized.setter
    def status_humanized(self, status_humanized):
        """Sets the status_humanized of this Run.


        :param status_humanized: The status_humanized of this Run.  # noqa: E501
        :type: str
        """

        self._status_humanized = status_humanized

    @property
    def created_at_humanized(self):
        """Gets the created_at_humanized of this Run.  # noqa: E501


        :return: The created_at_humanized of this Run.  # noqa: E501
        :rtype: str
        """
        return self._created_at_humanized

    @created_at_humanized.setter
    def created_at_humanized(self, created_at_humanized):
        """Sets the created_at_humanized of this Run.


        :param created_at_humanized: The created_at_humanized of this Run.  # noqa: E501
        :type: str
        """

        self._created_at_humanized = created_at_humanized

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Run, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Run):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
