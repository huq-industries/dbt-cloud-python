# coding: utf-8

"""
    dbt Cloud API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0a1
    Contact: support@getdbt.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Status(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'int',
        'is_success': 'bool',
        'user_message': 'str',
        'developer_message': 'str'
    }

    attribute_map = {
        'code': 'code',
        'is_success': 'is_success',
        'user_message': 'user_message',
        'developer_message': 'developer_message'
    }

    def __init__(self, code=None, is_success=None, user_message=None, developer_message=None):  # noqa: E501
        """Status - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._is_success = None
        self._user_message = None
        self._developer_message = None
        self.discriminator = None
        if code is not None:
            self.code = code
        if is_success is not None:
            self.is_success = is_success
        if user_message is not None:
            self.user_message = user_message
        if developer_message is not None:
            self.developer_message = developer_message

    @property
    def code(self):
        """Gets the code of this Status.  # noqa: E501

        Same as the HTTP status code returned.  # noqa: E501

        :return: The code of this Status.  # noqa: E501
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Status.

        Same as the HTTP status code returned.  # noqa: E501

        :param code: The code of this Status.  # noqa: E501
        :type: int
        """

        self._code = code

    @property
    def is_success(self):
        """Gets the is_success of this Status.  # noqa: E501

        Whether or not the request succeeded.  # noqa: E501

        :return: The is_success of this Status.  # noqa: E501
        :rtype: bool
        """
        return self._is_success

    @is_success.setter
    def is_success(self, is_success):
        """Sets the is_success of this Status.

        Whether or not the request succeeded.  # noqa: E501

        :param is_success: The is_success of this Status.  # noqa: E501
        :type: bool
        """

        self._is_success = is_success

    @property
    def user_message(self):
        """Gets the user_message of this Status.  # noqa: E501

        End-user-friendly description of the response.  # noqa: E501

        :return: The user_message of this Status.  # noqa: E501
        :rtype: str
        """
        return self._user_message

    @user_message.setter
    def user_message(self, user_message):
        """Sets the user_message of this Status.

        End-user-friendly description of the response.  # noqa: E501

        :param user_message: The user_message of this Status.  # noqa: E501
        :type: str
        """

        self._user_message = user_message

    @property
    def developer_message(self):
        """Gets the developer_message of this Status.  # noqa: E501

        Technical description of the response.  # noqa: E501

        :return: The developer_message of this Status.  # noqa: E501
        :rtype: str
        """
        return self._developer_message

    @developer_message.setter
    def developer_message(self, developer_message):
        """Sets the developer_message of this Status.

        Technical description of the response.  # noqa: E501

        :param developer_message: The developer_message of this Status.  # noqa: E501
        :type: str
        """

        self._developer_message = developer_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Status, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Status):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
