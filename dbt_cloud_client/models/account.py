# coding: utf-8

"""
    dbt Cloud API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0a1
    Contact: support@getdbt.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Account(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'plan': 'str',
        'pending_cancel': 'bool',
        'extra_slots': 'int',
        'extra_seats': 'int',
        'total_seats': 'int',
        'state': 'int',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'plan': 'plan',
        'pending_cancel': 'pending_cancel',
        'extra_slots': 'extra_slots',
        'extra_seats': 'extra_seats',
        'total_seats': 'total_seats',
        'state': 'state',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, name=None, plan=None, pending_cancel=None, extra_slots=None, extra_seats=None, total_seats=None, state=None, created_at=None, updated_at=None):  # noqa: E501
        """Account - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._plan = None
        self._pending_cancel = None
        self._extra_slots = None
        self._extra_seats = None
        self._total_seats = None
        self._state = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if plan is not None:
            self.plan = plan
        if pending_cancel is not None:
            self.pending_cancel = pending_cancel
        if extra_slots is not None:
            self.extra_slots = extra_slots
        if extra_seats is not None:
            self.extra_seats = extra_seats
        if total_seats is not None:
            self.total_seats = total_seats
        if state is not None:
            self.state = state
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this Account.  # noqa: E501


        :return: The id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.


        :param id: The id of this Account.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Account.  # noqa: E501


        :return: The name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Account.


        :param name: The name of this Account.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def plan(self):
        """Gets the plan of this Account.  # noqa: E501


        :return: The plan of this Account.  # noqa: E501
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this Account.


        :param plan: The plan of this Account.  # noqa: E501
        :type: str
        """

        self._plan = plan

    @property
    def pending_cancel(self):
        """Gets the pending_cancel of this Account.  # noqa: E501


        :return: The pending_cancel of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._pending_cancel

    @pending_cancel.setter
    def pending_cancel(self, pending_cancel):
        """Sets the pending_cancel of this Account.


        :param pending_cancel: The pending_cancel of this Account.  # noqa: E501
        :type: bool
        """

        self._pending_cancel = pending_cancel

    @property
    def extra_slots(self):
        """Gets the extra_slots of this Account.  # noqa: E501


        :return: The extra_slots of this Account.  # noqa: E501
        :rtype: int
        """
        return self._extra_slots

    @extra_slots.setter
    def extra_slots(self, extra_slots):
        """Sets the extra_slots of this Account.


        :param extra_slots: The extra_slots of this Account.  # noqa: E501
        :type: int
        """

        self._extra_slots = extra_slots

    @property
    def extra_seats(self):
        """Gets the extra_seats of this Account.  # noqa: E501


        :return: The extra_seats of this Account.  # noqa: E501
        :rtype: int
        """
        return self._extra_seats

    @extra_seats.setter
    def extra_seats(self, extra_seats):
        """Sets the extra_seats of this Account.


        :param extra_seats: The extra_seats of this Account.  # noqa: E501
        :type: int
        """

        self._extra_seats = extra_seats

    @property
    def total_seats(self):
        """Gets the total_seats of this Account.  # noqa: E501


        :return: The total_seats of this Account.  # noqa: E501
        :rtype: int
        """
        return self._total_seats

    @total_seats.setter
    def total_seats(self, total_seats):
        """Sets the total_seats of this Account.


        :param total_seats: The total_seats of this Account.  # noqa: E501
        :type: int
        """

        self._total_seats = total_seats

    @property
    def state(self):
        """Gets the state of this Account.  # noqa: E501


        :return: The state of this Account.  # noqa: E501
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Account.


        :param state: The state of this Account.  # noqa: E501
        :type: int
        """

        self._state = state

    @property
    def created_at(self):
        """Gets the created_at of this Account.  # noqa: E501


        :return: The created_at of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Account.


        :param created_at: The created_at of this Account.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Account.  # noqa: E501


        :return: The updated_at of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Account.


        :param updated_at: The updated_at of this Account.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Account, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Account):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
