# coding: utf-8

"""
    dbt Cloud API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0a1
    Contact: support@getdbt.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Repository(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'account_id': 'int',
        'remote_url': 'str',
        'remote_backend': 'str',
        'git_clone_strategy': 'str',
        'deploy_key_id': 'int',
        'github_installation_id': 'int',
        'state': 'int',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'account_id': 'account_id',
        'remote_url': 'remote_url',
        'remote_backend': 'remote_backend',
        'git_clone_strategy': 'git_clone_strategy',
        'deploy_key_id': 'deploy_key_id',
        'github_installation_id': 'github_installation_id',
        'state': 'state',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, account_id=None, remote_url=None, remote_backend=None, git_clone_strategy=None, deploy_key_id=None, github_installation_id=None, state=None, created_at=None, updated_at=None):  # noqa: E501
        """Repository - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._account_id = None
        self._remote_url = None
        self._remote_backend = None
        self._git_clone_strategy = None
        self._deploy_key_id = None
        self._github_installation_id = None
        self._state = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if account_id is not None:
            self.account_id = account_id
        if remote_url is not None:
            self.remote_url = remote_url
        if remote_backend is not None:
            self.remote_backend = remote_backend
        if git_clone_strategy is not None:
            self.git_clone_strategy = git_clone_strategy
        if deploy_key_id is not None:
            self.deploy_key_id = deploy_key_id
        if github_installation_id is not None:
            self.github_installation_id = github_installation_id
        if state is not None:
            self.state = state
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this Repository.  # noqa: E501


        :return: The id of this Repository.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Repository.


        :param id: The id of this Repository.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this Repository.  # noqa: E501


        :return: The account_id of this Repository.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Repository.


        :param account_id: The account_id of this Repository.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def remote_url(self):
        """Gets the remote_url of this Repository.  # noqa: E501


        :return: The remote_url of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._remote_url

    @remote_url.setter
    def remote_url(self, remote_url):
        """Sets the remote_url of this Repository.


        :param remote_url: The remote_url of this Repository.  # noqa: E501
        :type: str
        """

        self._remote_url = remote_url

    @property
    def remote_backend(self):
        """Gets the remote_backend of this Repository.  # noqa: E501


        :return: The remote_backend of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._remote_backend

    @remote_backend.setter
    def remote_backend(self, remote_backend):
        """Sets the remote_backend of this Repository.


        :param remote_backend: The remote_backend of this Repository.  # noqa: E501
        :type: str
        """

        self._remote_backend = remote_backend

    @property
    def git_clone_strategy(self):
        """Gets the git_clone_strategy of this Repository.  # noqa: E501


        :return: The git_clone_strategy of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._git_clone_strategy

    @git_clone_strategy.setter
    def git_clone_strategy(self, git_clone_strategy):
        """Sets the git_clone_strategy of this Repository.


        :param git_clone_strategy: The git_clone_strategy of this Repository.  # noqa: E501
        :type: str
        """

        self._git_clone_strategy = git_clone_strategy

    @property
    def deploy_key_id(self):
        """Gets the deploy_key_id of this Repository.  # noqa: E501


        :return: The deploy_key_id of this Repository.  # noqa: E501
        :rtype: int
        """
        return self._deploy_key_id

    @deploy_key_id.setter
    def deploy_key_id(self, deploy_key_id):
        """Sets the deploy_key_id of this Repository.


        :param deploy_key_id: The deploy_key_id of this Repository.  # noqa: E501
        :type: int
        """

        self._deploy_key_id = deploy_key_id

    @property
    def github_installation_id(self):
        """Gets the github_installation_id of this Repository.  # noqa: E501


        :return: The github_installation_id of this Repository.  # noqa: E501
        :rtype: int
        """
        return self._github_installation_id

    @github_installation_id.setter
    def github_installation_id(self, github_installation_id):
        """Sets the github_installation_id of this Repository.


        :param github_installation_id: The github_installation_id of this Repository.  # noqa: E501
        :type: int
        """

        self._github_installation_id = github_installation_id

    @property
    def state(self):
        """Gets the state of this Repository.  # noqa: E501


        :return: The state of this Repository.  # noqa: E501
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Repository.


        :param state: The state of this Repository.  # noqa: E501
        :type: int
        """

        self._state = state

    @property
    def created_at(self):
        """Gets the created_at of this Repository.  # noqa: E501


        :return: The created_at of this Repository.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Repository.


        :param created_at: The created_at of this Repository.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Repository.  # noqa: E501


        :return: The updated_at of this Repository.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Repository.


        :param updated_at: The updated_at of this Repository.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Repository, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Repository):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
