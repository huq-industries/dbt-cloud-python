# coding: utf-8

"""
    dbt Cloud API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0a1
    Contact: support@getdbt.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class BigqueryConnection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'account_id': 'int',
        'created_by_id': 'int',
        'name': 'str',
        'type': 'str',
        'state': 'int',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'project_id': 'str',
        'timeout_seconds': 'int',
        'private_key_id': 'str',
        'private_key': 'str',
        'client_email': 'str',
        'client_id': 'str',
        'auth_uri': 'str',
        'token_uri': 'str',
        'auth_provider_x509_cert_url': 'str',
        'client_x509_cert_url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'account_id': 'account_id',
        'created_by_id': 'created_by_id',
        'name': 'name',
        'type': 'type',
        'state': 'state',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'project_id': 'project_id',
        'timeout_seconds': 'timeout_seconds',
        'private_key_id': 'private_key_id',
        'private_key': 'private_key',
        'client_email': 'client_email',
        'client_id': 'client_id',
        'auth_uri': 'auth_uri',
        'token_uri': 'token_uri',
        'auth_provider_x509_cert_url': 'auth_provider_x509_cert_url',
        'client_x509_cert_url': 'client_x509_cert_url'
    }

    def __init__(self, id=None, account_id=None, created_by_id=None, name=None, type=None, state=None, created_at=None, updated_at=None, project_id=None, timeout_seconds=None, private_key_id=None, private_key=None, client_email=None, client_id=None, auth_uri=None, token_uri=None, auth_provider_x509_cert_url=None, client_x509_cert_url=None):  # noqa: E501
        """BigqueryConnection - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._account_id = None
        self._created_by_id = None
        self._name = None
        self._type = None
        self._state = None
        self._created_at = None
        self._updated_at = None
        self._project_id = None
        self._timeout_seconds = None
        self._private_key_id = None
        self._private_key = None
        self._client_email = None
        self._client_id = None
        self._auth_uri = None
        self._token_uri = None
        self._auth_provider_x509_cert_url = None
        self._client_x509_cert_url = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if account_id is not None:
            self.account_id = account_id
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if state is not None:
            self.state = state
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if project_id is not None:
            self.project_id = project_id
        if timeout_seconds is not None:
            self.timeout_seconds = timeout_seconds
        if private_key_id is not None:
            self.private_key_id = private_key_id
        if private_key is not None:
            self.private_key = private_key
        if client_email is not None:
            self.client_email = client_email
        if client_id is not None:
            self.client_id = client_id
        if auth_uri is not None:
            self.auth_uri = auth_uri
        if token_uri is not None:
            self.token_uri = token_uri
        if auth_provider_x509_cert_url is not None:
            self.auth_provider_x509_cert_url = auth_provider_x509_cert_url
        if client_x509_cert_url is not None:
            self.client_x509_cert_url = client_x509_cert_url

    @property
    def id(self):
        """Gets the id of this BigqueryConnection.  # noqa: E501


        :return: The id of this BigqueryConnection.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BigqueryConnection.


        :param id: The id of this BigqueryConnection.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this BigqueryConnection.  # noqa: E501


        :return: The account_id of this BigqueryConnection.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this BigqueryConnection.


        :param account_id: The account_id of this BigqueryConnection.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def created_by_id(self):
        """Gets the created_by_id of this BigqueryConnection.  # noqa: E501

        User ID who created the connection  # noqa: E501

        :return: The created_by_id of this BigqueryConnection.  # noqa: E501
        :rtype: int
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this BigqueryConnection.

        User ID who created the connection  # noqa: E501

        :param created_by_id: The created_by_id of this BigqueryConnection.  # noqa: E501
        :type: int
        """

        self._created_by_id = created_by_id

    @property
    def name(self):
        """Gets the name of this BigqueryConnection.  # noqa: E501


        :return: The name of this BigqueryConnection.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BigqueryConnection.


        :param name: The name of this BigqueryConnection.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this BigqueryConnection.  # noqa: E501


        :return: The type of this BigqueryConnection.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BigqueryConnection.


        :param type: The type of this BigqueryConnection.  # noqa: E501
        :type: str
        """
        allowed_values = ["postgres", "redshift", "snowflake", "bigquery"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def state(self):
        """Gets the state of this BigqueryConnection.  # noqa: E501


        :return: The state of this BigqueryConnection.  # noqa: E501
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BigqueryConnection.


        :param state: The state of this BigqueryConnection.  # noqa: E501
        :type: int
        """

        self._state = state

    @property
    def created_at(self):
        """Gets the created_at of this BigqueryConnection.  # noqa: E501


        :return: The created_at of this BigqueryConnection.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BigqueryConnection.


        :param created_at: The created_at of this BigqueryConnection.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this BigqueryConnection.  # noqa: E501


        :return: The updated_at of this BigqueryConnection.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this BigqueryConnection.


        :param updated_at: The updated_at of this BigqueryConnection.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def project_id(self):
        """Gets the project_id of this BigqueryConnection.  # noqa: E501

        Google BigQuery project ID  # noqa: E501

        :return: The project_id of this BigqueryConnection.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this BigqueryConnection.

        Google BigQuery project ID  # noqa: E501

        :param project_id: The project_id of this BigqueryConnection.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def timeout_seconds(self):
        """Gets the timeout_seconds of this BigqueryConnection.  # noqa: E501


        :return: The timeout_seconds of this BigqueryConnection.  # noqa: E501
        :rtype: int
        """
        return self._timeout_seconds

    @timeout_seconds.setter
    def timeout_seconds(self, timeout_seconds):
        """Sets the timeout_seconds of this BigqueryConnection.


        :param timeout_seconds: The timeout_seconds of this BigqueryConnection.  # noqa: E501
        :type: int
        """

        self._timeout_seconds = timeout_seconds

    @property
    def private_key_id(self):
        """Gets the private_key_id of this BigqueryConnection.  # noqa: E501


        :return: The private_key_id of this BigqueryConnection.  # noqa: E501
        :rtype: str
        """
        return self._private_key_id

    @private_key_id.setter
    def private_key_id(self, private_key_id):
        """Sets the private_key_id of this BigqueryConnection.


        :param private_key_id: The private_key_id of this BigqueryConnection.  # noqa: E501
        :type: str
        """

        self._private_key_id = private_key_id

    @property
    def private_key(self):
        """Gets the private_key of this BigqueryConnection.  # noqa: E501


        :return: The private_key of this BigqueryConnection.  # noqa: E501
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this BigqueryConnection.


        :param private_key: The private_key of this BigqueryConnection.  # noqa: E501
        :type: str
        """

        self._private_key = private_key

    @property
    def client_email(self):
        """Gets the client_email of this BigqueryConnection.  # noqa: E501


        :return: The client_email of this BigqueryConnection.  # noqa: E501
        :rtype: str
        """
        return self._client_email

    @client_email.setter
    def client_email(self, client_email):
        """Sets the client_email of this BigqueryConnection.


        :param client_email: The client_email of this BigqueryConnection.  # noqa: E501
        :type: str
        """

        self._client_email = client_email

    @property
    def client_id(self):
        """Gets the client_id of this BigqueryConnection.  # noqa: E501


        :return: The client_id of this BigqueryConnection.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this BigqueryConnection.


        :param client_id: The client_id of this BigqueryConnection.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def auth_uri(self):
        """Gets the auth_uri of this BigqueryConnection.  # noqa: E501


        :return: The auth_uri of this BigqueryConnection.  # noqa: E501
        :rtype: str
        """
        return self._auth_uri

    @auth_uri.setter
    def auth_uri(self, auth_uri):
        """Sets the auth_uri of this BigqueryConnection.


        :param auth_uri: The auth_uri of this BigqueryConnection.  # noqa: E501
        :type: str
        """

        self._auth_uri = auth_uri

    @property
    def token_uri(self):
        """Gets the token_uri of this BigqueryConnection.  # noqa: E501


        :return: The token_uri of this BigqueryConnection.  # noqa: E501
        :rtype: str
        """
        return self._token_uri

    @token_uri.setter
    def token_uri(self, token_uri):
        """Sets the token_uri of this BigqueryConnection.


        :param token_uri: The token_uri of this BigqueryConnection.  # noqa: E501
        :type: str
        """

        self._token_uri = token_uri

    @property
    def auth_provider_x509_cert_url(self):
        """Gets the auth_provider_x509_cert_url of this BigqueryConnection.  # noqa: E501


        :return: The auth_provider_x509_cert_url of this BigqueryConnection.  # noqa: E501
        :rtype: str
        """
        return self._auth_provider_x509_cert_url

    @auth_provider_x509_cert_url.setter
    def auth_provider_x509_cert_url(self, auth_provider_x509_cert_url):
        """Sets the auth_provider_x509_cert_url of this BigqueryConnection.


        :param auth_provider_x509_cert_url: The auth_provider_x509_cert_url of this BigqueryConnection.  # noqa: E501
        :type: str
        """

        self._auth_provider_x509_cert_url = auth_provider_x509_cert_url

    @property
    def client_x509_cert_url(self):
        """Gets the client_x509_cert_url of this BigqueryConnection.  # noqa: E501


        :return: The client_x509_cert_url of this BigqueryConnection.  # noqa: E501
        :rtype: str
        """
        return self._client_x509_cert_url

    @client_x509_cert_url.setter
    def client_x509_cert_url(self, client_x509_cert_url):
        """Sets the client_x509_cert_url of this BigqueryConnection.


        :param client_x509_cert_url: The client_x509_cert_url of this BigqueryConnection.  # noqa: E501
        :type: str
        """

        self._client_x509_cert_url = client_x509_cert_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BigqueryConnection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BigqueryConnection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
