# coding: utf-8

"""
    dbt Cloud API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0a1
    Contact: support@getdbt.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class BigqueryCredential(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'account_id': 'int',
        'type': 'str',
        'state': 'int',
        'schema': 'str'
    }

    attribute_map = {
        'id': 'id',
        'account_id': 'account_id',
        'type': 'type',
        'state': 'state',
        'schema': 'schema'
    }

    def __init__(self, id=None, account_id=None, type=None, state=None, schema=None):  # noqa: E501
        """BigqueryCredential - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._account_id = None
        self._type = None
        self._state = None
        self._schema = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if account_id is not None:
            self.account_id = account_id
        if type is not None:
            self.type = type
        if state is not None:
            self.state = state
        if schema is not None:
            self.schema = schema

    @property
    def id(self):
        """Gets the id of this BigqueryCredential.  # noqa: E501

        Leave blank when creating a BigqueryCredential object  # noqa: E501

        :return: The id of this BigqueryCredential.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BigqueryCredential.

        Leave blank when creating a BigqueryCredential object  # noqa: E501

        :param id: The id of this BigqueryCredential.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this BigqueryCredential.  # noqa: E501

        The account id to create the BigqueryCredential in  # noqa: E501

        :return: The account_id of this BigqueryCredential.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this BigqueryCredential.

        The account id to create the BigqueryCredential in  # noqa: E501

        :param account_id: The account_id of this BigqueryCredential.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def type(self):
        """Gets the type of this BigqueryCredential.  # noqa: E501

        The database type (for BigqueryCredentials, use \"bigquery\")  # noqa: E501

        :return: The type of this BigqueryCredential.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BigqueryCredential.

        The database type (for BigqueryCredentials, use \"bigquery\")  # noqa: E501

        :param type: The type of this BigqueryCredential.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def state(self):
        """Gets the state of this BigqueryCredential.  # noqa: E501

        The state of the BigqueryCredential (1 = present, 2 = deleted)  # noqa: E501

        :return: The state of this BigqueryCredential.  # noqa: E501
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BigqueryCredential.

        The state of the BigqueryCredential (1 = present, 2 = deleted)  # noqa: E501

        :param state: The state of this BigqueryCredential.  # noqa: E501
        :type: int
        """

        self._state = state

    @property
    def schema(self):
        """Gets the schema of this BigqueryCredential.  # noqa: E501

        The schema (dataset) for this BigqueryCredential object  # noqa: E501

        :return: The schema of this BigqueryCredential.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this BigqueryCredential.

        The schema (dataset) for this BigqueryCredential object  # noqa: E501

        :param schema: The schema of this BigqueryCredential.  # noqa: E501
        :type: str
        """

        self._schema = schema

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BigqueryCredential, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BigqueryCredential):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
