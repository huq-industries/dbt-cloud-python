# coding: utf-8

"""
    dbt Cloud API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0a1
    Contact: support@getdbt.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Job(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'project_id': 'int',
        'account_id': 'int',
        'name': 'str',
        'dbt_version': 'str',
        'triggers': 'JobTriggers',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'execute_steps': 'list[str]',
        'settings': 'JobSettings',
        'state': 'int',
        'generate_docs': 'bool',
        'schedule': 'JobSchedule'
    }

    attribute_map = {
        'id': 'id',
        'project_id': 'project_id',
        'account_id': 'account_id',
        'name': 'name',
        'dbt_version': 'dbt_version',
        'triggers': 'triggers',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'execute_steps': 'execute_steps',
        'settings': 'settings',
        'state': 'state',
        'generate_docs': 'generate_docs',
        'schedule': 'schedule'
    }

    def __init__(self, id=None, project_id=None, account_id=None, name=None, dbt_version=None, triggers=None, created_at=None, updated_at=None, execute_steps=None, settings=None, state=None, generate_docs=None, schedule=None):  # noqa: E501
        """Job - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._project_id = None
        self._account_id = None
        self._name = None
        self._dbt_version = None
        self._triggers = None
        self._created_at = None
        self._updated_at = None
        self._execute_steps = None
        self._settings = None
        self._state = None
        self._generate_docs = None
        self._schedule = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if project_id is not None:
            self.project_id = project_id
        if account_id is not None:
            self.account_id = account_id
        if name is not None:
            self.name = name
        if dbt_version is not None:
            self.dbt_version = dbt_version
        if triggers is not None:
            self.triggers = triggers
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if execute_steps is not None:
            self.execute_steps = execute_steps
        if settings is not None:
            self.settings = settings
        if state is not None:
            self.state = state
        if generate_docs is not None:
            self.generate_docs = generate_docs
        if schedule is not None:
            self.schedule = schedule

    @property
    def id(self):
        """Gets the id of this Job.  # noqa: E501


        :return: The id of this Job.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Job.


        :param id: The id of this Job.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def project_id(self):
        """Gets the project_id of this Job.  # noqa: E501


        :return: The project_id of this Job.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Job.


        :param project_id: The project_id of this Job.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def account_id(self):
        """Gets the account_id of this Job.  # noqa: E501


        :return: The account_id of this Job.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Job.


        :param account_id: The account_id of this Job.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def name(self):
        """Gets the name of this Job.  # noqa: E501


        :return: The name of this Job.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Job.


        :param name: The name of this Job.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def dbt_version(self):
        """Gets the dbt_version of this Job.  # noqa: E501


        :return: The dbt_version of this Job.  # noqa: E501
        :rtype: str
        """
        return self._dbt_version

    @dbt_version.setter
    def dbt_version(self, dbt_version):
        """Sets the dbt_version of this Job.


        :param dbt_version: The dbt_version of this Job.  # noqa: E501
        :type: str
        """

        self._dbt_version = dbt_version

    @property
    def triggers(self):
        """Gets the triggers of this Job.  # noqa: E501


        :return: The triggers of this Job.  # noqa: E501
        :rtype: JobTriggers
        """
        return self._triggers

    @triggers.setter
    def triggers(self, triggers):
        """Sets the triggers of this Job.


        :param triggers: The triggers of this Job.  # noqa: E501
        :type: JobTriggers
        """

        self._triggers = triggers

    @property
    def created_at(self):
        """Gets the created_at of this Job.  # noqa: E501


        :return: The created_at of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Job.


        :param created_at: The created_at of this Job.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Job.  # noqa: E501


        :return: The updated_at of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Job.


        :param updated_at: The updated_at of this Job.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def execute_steps(self):
        """Gets the execute_steps of this Job.  # noqa: E501


        :return: The execute_steps of this Job.  # noqa: E501
        :rtype: list[str]
        """
        return self._execute_steps

    @execute_steps.setter
    def execute_steps(self, execute_steps):
        """Sets the execute_steps of this Job.


        :param execute_steps: The execute_steps of this Job.  # noqa: E501
        :type: list[str]
        """

        self._execute_steps = execute_steps

    @property
    def settings(self):
        """Gets the settings of this Job.  # noqa: E501


        :return: The settings of this Job.  # noqa: E501
        :rtype: JobSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Job.


        :param settings: The settings of this Job.  # noqa: E501
        :type: JobSettings
        """

        self._settings = settings

    @property
    def state(self):
        """Gets the state of this Job.  # noqa: E501


        :return: The state of this Job.  # noqa: E501
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Job.


        :param state: The state of this Job.  # noqa: E501
        :type: int
        """

        self._state = state

    @property
    def generate_docs(self):
        """Gets the generate_docs of this Job.  # noqa: E501


        :return: The generate_docs of this Job.  # noqa: E501
        :rtype: bool
        """
        return self._generate_docs

    @generate_docs.setter
    def generate_docs(self, generate_docs):
        """Sets the generate_docs of this Job.


        :param generate_docs: The generate_docs of this Job.  # noqa: E501
        :type: bool
        """

        self._generate_docs = generate_docs

    @property
    def schedule(self):
        """Gets the schedule of this Job.  # noqa: E501


        :return: The schedule of this Job.  # noqa: E501
        :rtype: JobSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this Job.


        :param schedule: The schedule of this Job.  # noqa: E501
        :type: JobSchedule
        """

        self._schedule = schedule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Job, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Job):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
